# -*- coding: utf-8 -*-
"""bank_doc_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G2IkjS8cPu2AGtPHvHeSMTQJpZKLwq4J
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, Flatten , Dropout
from tensorflow.keras.models import Model

# Load the VGG16 model with pre-trained weights (excluding the top fully connected layers)
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Add custom classification layers
x = base_model.output
x = Flatten()(x)
x = Dense(256, activation='relu')(x)
x = Dropout(0.5)(x)
predictions = Dense(16, activation='softmax')(x)

# Create the model
model = Model(inputs=base_model.input, outputs=predictions)

for layer in base_model.layers:
    layer.trainable = False

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Set up data generators with data augmentation
train_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode='constant'
)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/bank/Train',  # Replace with the path to your training data
    target_size=(224, 224),
    class_mode='categorical',  # Assuming you have categorical labels
)

# Train the model
model.fit(train_generator, epochs=28)

# Save the trained model
model.save('trained_vgg16__bank_model6.h5')

# Get the mapping of numeric labels to class names
class_names = list(train_generator.class_indices.keys())

print(class_names)

import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.applications.vgg16 import preprocess_input
import numpy as np

def predict_class(image_path, model):
    # Load and preprocess an image for testing
    def preprocess_image(image_path):
        img = load_img(image_path, target_size=(224, 224))
        img_array = img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = preprocess_input(img_array)
        return img_array

    preprocessed_image = preprocess_image(image_path)

    prediction = model.predict(preprocessed_image)

    predicted_class = np.argmax(prediction)

    return predicted_class

# Path to the folder containing test images
test_images_folder = '/content/drive/MyDrive/bank/Test'

for image_name in os.listdir(test_images_folder):
    image_path = os.path.join(test_images_folder, image_name)
    predicted_class_numeric = predict_class(image_path, model)
    predicted_class_name = class_names[predicted_class_numeric]

    print(f"Test Image: {image_name}, Predicted Class: {predicted_class_name}")